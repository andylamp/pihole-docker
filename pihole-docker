#!/bin/bash

# This is a script that creates and maintains my pi-hole installation configured in a way that I can easily run it
# through the terminal. Note: as it's evident from the shebang it was developed (and tested) with bash (only).
#
# Author: Andreas Grammenos (ag926@cl.cam.ac.uk)
#
# shellcheck disable=SC2317

##### Initialisation and preamble

# pretty functions for log output
function cli_info { echo -e " -- \033[1;32m$1\033[0m"; }
function cli_info_read { echo -e -n " -- \e[1;32m$1\e[0m"; }
function cli_warning { echo -e " ** \033[1;33m$1\033[0m"; }
function cli_warning_read { echo -e -n " ** \e[1;33m$1\e[0m"; }
function cli_error { echo -e " !! \033[1;31m$1\033[0m"; }

# check if we have access to docker-compose, jq, and curl
if [[ ! -x "$(command -v docker-compose)" ]] ||
  [[ ! -x "$(command -v docker)" ]] ||
  [[ ! -x "$(command -v curl)" ]]; then
  cli_error "curl, docker, and docker-compose need to be installed and accessible - cannot continue."
  exit 1
else
  cli_info "curl, docker, and docker-compose appear to be present."
fi

# the pihole .env file to use
PIHOLE_DOTENV_FILENAME=".pihole.env"

# parse .env, thanks to https://gist.github.com/judy2k/7656bfe3b322d669ef75364a46327836 thread for the idea, which
# includes a modification to ensure the file ends at a newline and all lines are read correctly.

function export_envs() {
  local env_file=${1:-.env}
  local is_comment='^[[:space:]]*#'
  local is_blank='^[[:space:]]*$'
  cli_info "Attempting to parse .env file: ${env_file}"

  if [[ ! -f "${env_file}" ]]; then
    cli_error "The target file is not present cannot continue..."
    exit 1
  fi

  # ensure it has a newline that the end, if it does not already
  tail_line=$(tail -n 1 "${env_file}")
  if [[ "${tail_line}" != "" ]]; then
    cli_warning "No Newline at end of ${env_file}, appending!"
    echo "" >>"${env_file}"
  fi

  while IFS= read -r line; do
    [[ $line =~ $is_comment ]] && continue
    [[ $line =~ $is_blank ]] && continue
    key=$(echo "$line" | cut -d '=' -f 1)
    # shellcheck disable=SC2034
    value=$(echo "$line" | cut -d '=' -f 2-)
    # shellcheck disable=SC2116,SC1083
    # echo "The key: ${key} and value: ${value}"
    eval "export ${key}=\"$(echo \${value})\""
  done < <(cat "${env_file}")
}

# handy function which tokenizes a csv formatted line into its respective values
function tokenize_csv() {
  # echo "Tokenize: ${1}"

  # check the number of arguments, if it's something else than two,
  # use the default mapping
  if [[ ${#} != 2 ]]; then
    template="%s\n"
  else
    template="${2}"
  fi

  # echo "Template is '${template}'"

  IFS=","
  read -ra line <<<"${1}"
  for token in "${line[@]}"; do
    # we need to disable this directive, as we want the format to be a variable.
    # shellcheck disable=SC2059
    printf "${template}" "${token}"
  done
}

# parse the .env file
export_envs ${PIHOLE_DOTENV_FILENAME}

##### Variables and setup

# uninstall flag
UNINSTALL=false

# configure ufw for pihole flag - only configures it if true
# the local subnet - please configure accordingly

if [[ -z "${UFW_IP_BASE}" ]]; then
  UFW_IP_BASE="10.10.1"
  cli_warning "Value for the base IPv4 subnet base was not set, using default: ${UFW_IP_BASE}"
fi

UFW_SUBNET="${UFW_IP_BASE}.0/24"

if [[ -z "${UFW_PIHOLE_RULENAME}" ]]; then
  UFW_PIHOLE_RULENAME="pihole"
  cli_warning "Value for UFW pihole rule name was not set, using default: ${UFW_PIHOLE_RULENAME}"
fi

# the resolved related bits
ETC_RESOLV_CONF="/etc/resolv.conf"
# this is the default dns that /etc/resolv.conf points to if dns stub is enabled
RESOLV_DNS_IP="127.0.0.53"

# persistence related directories where the volumes will be mounted
if [[ -z ${PIHOLE_BASE} ]]; then
  cli_error "The variable PIHOLE_BASE must be set to the target base directory, cannot continue."
  exit 1
fi

PIHOLE_CONF=${PIHOLE_BASE}/etc-pihole
PIHOLE_DNSMASQ_CONF=${PIHOLE_BASE}/etc-dnsmasq.d
PIHOLE_RESOLV_CONF=${PIHOLE_BASE}/etc-resolv.conf
PIHOLE_LOG=${PIHOLE_BASE}/pihole.log
PIHOLE_FTL_LOG=${PIHOLE_BASE}/pihole-FTL.log

# ports that the web-interface listens to from localhost (and ufw is configured)
if [[ -z "${PIHOLE_ADMIN_HTTP_PORT}" ]]; then
  PIHOLE_ADMIN_HTTP_PORT=19080
  cli_warning "The admin http port for the interface was not set, using default one: ${PIHOLE_ADMIN_HTTP_PORT}"
fi

if [[ -z "${PIHOLE_ADMIN_HTTPS_PORT}" ]]; then
  PIHOLE_ADMIN_HTTPS_PORT=19443
  cli_warning "The admin https port for the interface was not set, using default one: ${PIHOLE_ADMIN_HTTPS_PORT}"
fi

cli_info "Port values for admin interface, http: ${PIHOLE_ADMIN_HTTP_PORT}, https: ${PIHOLE_ADMIN_HTTPS_PORT}"

if [[ -z "${PIHOLE_DNS_IPV4}" ]]; then
  PIHOLE_DNS_IPV4="127.0.0.1,1.1.1.1,1.0.0.1"
  cli_warning "IPv4 DNS are missing, using defaults: ${PIHOLE_DNS_IPV4}"
fi

if [[ -z "${PIHOLE_DNS_IPV6}" ]]; then
  PIHOLE_DNS_IPV6="2606:4700:4700::1111,2606:4700:4700::1001"
  cli_warning "IPv6 DNS are missing, using defaults: ${PIHOLE_DNS_IPV6}"
fi

if [[ -z "${PIHOLE_TZ}" ]]; then
  PIHOLE_TZ="Europe/London"
  cli_warning "There was no timezone supplied, using default value which is: ${PIHOLE_TZ}"
else
  cli_info "Timezone for pihole container is: ${PIHOLE_TZ}"
fi

if [[ -z "${PIHOLE_DOCKER_COMPOSE_FILENAME}" ]]; then
  PIHOLE_DOCKER_COMPOSE_FILENAME="pihole.yaml"
  cli_warning "docker compose filename was not set, using default: ${PIHOLE_DOCKER_COMPOSE_FILENAME}"
else
  cli_info "Using docker compose filename: ${PIHOLE_DOCKER_COMPOSE_FILENAME}"
fi

if [[ -z "${PIHOLE_DOCKER_PROJ_NAME}" ]]; then
  PIHOLE_DOCKER_PROJ_NAME="pihole-docker"
  cli_warning "Pihole project name was not set, using default: ${PIHOLE_DOCKER_PROJ_NAME}"
else
  cli_info "Using pihole docker project name: ${PIHOLE_DOCKER_PROJ_NAME}"
fi

if [[ -z "${PIHOLE_DOCKER_CONT_NAME}" ]]; then
  PIHOLE_DOCKER_CONT_NAME="pihole"
  cli_warning "Pihole docker container name was not set, using default: ${PIHOLE_DOCKER_CONT_NAME}"
else
  cli_info "Using pihole docker container name: ${PIHOLE_DOCKER_CONT_NAME}"
fi

# create the volumes based on the user
USER_UID=$(id -u)
USER_NAME=$(whoami)

#### Installation path (install or remove?)

if [[ ${#} -eq 0 ]]; then
  cli_info "Install procedure selected"
elif [[ ${#} -eq 1 ]]; then
  if [[ "${1}" == "-r" ]]; then
    cli_warning "Uninstall procedure selected"
    UNINSTALL=true
  elif [[ "${1}" == "-i" ]]; then
    cli_warning "Install procedure selected"
  else
    cli_error "invalid command argument provided accepted are only -i and -r."
  fi
else
  cli_error "script arguments need to be zero (for install) or exactly one (for remove)"
  exit 1
fi

##### Ensure we have a password

# check if we have an environment variable for the password
if [[ -z ${PIHOLE_ADMIN_PASS} ]] && [[ "${UNINSTALL}" != true ]]; then
  cli_error "You need to set the password in the .env file variable named PIHOLE_ADMIN_PASS - cannot continue..."
  exit 1
else
  cli_info "Discovered password through a (valid) environment variable"
fi

##### Check if we need to uninstall

if [[ "${UNINSTALL}" = true ]]; then
  cli_warning "Uninstalling pi-hole and removing all data (note: resolved configuration is _not_ restored)..."

  cli_warning_read "We will now delete the following directory: ${PIHOLE_BASE} - are you sure? [y/n]: "
  read -n 1 -r
  echo ""
  if [[ ${REPLY} =~ ^[yY]$ ]] || [[ -z ${REPLY} ]]; then
    cli_info "\tOK, proceeding!"
  else
    cli_warning "\tOK, aborting execution!"
    exit 0
  fi

  if docker-compose -p "${PIHOLE_DOCKER_PROJ_NAME}" -f "${PIHOLE_DOCKER_COMPOSE_FILENAME}" down &&
    docker container prune -f &&
    # remove the data stored by pi-hole
    sudo rm -rf "${PIHOLE_BASE}"; then
    cli_warning "Uninstallation completed successfully!"
    exit 0
  else
    cli_error "There was an error while uninstalling..."
    exit 1
  fi
fi

#### Create the required folders, if not already there.

# create the folders while making the user owner the pihole directory
if ! ret_val=$(sudo mkdir -p {"${PIHOLE_CONF}","${PIHOLE_DNSMASQ_CONF}"} &&
  sudo chown -R "${USER_NAME}":"${USER_NAME}" "${PIHOLE_BASE}"); then
  cli_error "Could not create pi-hole directories and/or assign permissions - ret val: ${ret_val}."
  exit 1
else
  cli_info "Created required pi-hole directories and assigned permissions for user ${USER_NAME} (id: ${USER_UID})"
fi

# function that prints the resolv.conf for pi-hole
function print_resolv_conf() {
  # the printing template to use
  template="nameserver %s\n"

  # put ipv4 dns entries it to resolv.conf
  if ! tokenize_csv "${PIHOLE_DNS_IPV4}" "${template}" >"${PIHOLE_RESOLV_CONF}"; then
    return 1
  fi

  # put ipv6 dns entries to the resolv.conf
  if ! tokenize_csv "${PIHOLE_DNS_IPV6}" "${template}" >>"${PIHOLE_RESOLV_CONF}"; then
    return 1
  fi

}

# now run it.
if print_resolv_conf; then
  cli_info "Created pi-hole resolv.conf successfully."
else
  cli_error "Failed to create pi-hole resolv.conf - cannot continue"
  exit 1
fi

##### Prepare the logs

if touch "${PIHOLE_FTL_LOG}" && touch "${PIHOLE_LOG}"; then
  cli_info "Log files for FTL: ${PIHOLE_FTL_LOG}, pihole: ${PIHOLE_LOG} created successfully"
else
  cli_error "Failed to create log files for FTL and/or pihole - cannot continue"
  exit 1
fi

##### Prepare the systemd-resolved if needed

if [[ -f "${ETC_RESOLV_CONF}" ]] && grep -q "${RESOLV_DNS_IP}" "${ETC_RESOLV_CONF}"; then
  cli_info "Located resolv.conf with a potential problem; it is mapped to: ${RESOLV_DNS_IP} - trying to fix it. "

  if sudo sed -r -i.orig 's/#?DNSStubListener=yes/DNSStubListener=no/g' /etc/systemd/resolved.conf &&
    sudo sh -c "rm ${ETC_RESOLV_CONF} && ln -s /run/systemd/resolve/resolv.conf ${ETC_RESOLV_CONF}"; then
    cli_info "resolved config was fixed successfully."
    if ! sudo systemctl stop systemd-resolved; then
      cli_error "Failed to stop systemd-resolved service - cannot continue"
      exit 1
    fi
  else
    cli_error "There was an error while configuring resolved - cannot continue, pihole will probably not work"
    exit 1
  fi
else
  cli_info "resolv.conf appears to be OK - continuing"
fi

##### Create the pihole yaml file

# nifty little function to print the plug IPs in a tidy way
# shellcheck disable=SC2120
function print_dns_ip() {
  echo -e "# IPs of your DNS entries"
  echo "    dns:"

  # do for ipv4
  tokenize_csv "${PIHOLE_DNS_IPV4}" "      - %s\n"

  # do for ipv6
  tokenize_csv "${PIHOLE_DNS_IPV6}" "      - %s\n"
}

cli_info "Creating pi-hole services dockerfile..."

echo -e "
# Generated automatically from my pi-hole script
version: \"3.8\"

# More info at https://github.com/pi-hole/docker-pi-hole/ and https://docs.pi-hole.net/
services:
  cloudflared:
    image: visibilityspots/cloudflared:latest
    container_name: cloudflared
    ports:
      - \"5053:5053/udp\"
      - \"49312:49312/tcp\"
    # this is for performance reasons
    network_mode: \"host\"
    environment:
      # this allows dual stack instance, handling both IPv4 and IPv6 queries
      ADDRESS: ::
    restart: unless-stopped
  pihole:
    container_name: ${PIHOLE_DOCKER_CONT_NAME}
    image: pihole/pihole:latest
    depends_on:
      - cloudflared
    ports:
      # dns ports
      - \"53:53/tcp\"
      - \"53:53/udp\"
      # ftl (dhcp) ports
      #- \"67:67/udp\"
      #- \"67:67/udp\"
      #- \"547:547/udp\"
      # ports for http interface
      - \"${PIHOLE_ADMIN_HTTP_PORT}:80/tcp\"
      - \"${PIHOLE_ADMIN_HTTPS_PORT}:443/tcp\"
    environment:
      TZ: ${PIHOLE_TZ}
      WEBPASSWORD: ${PIHOLE_ADMIN_PASS}
      FTLCONF_LOCAL_IPV4: ${PIHOLE_LOCAL_IPV4}
      FTLCONF_LOCAL_IPV6: ${PIHOLE_LOCAL_IPV6}
    # Volumes store your data between container upgrades
    volumes:
      - \"${PIHOLE_CONF}:/etc/pihole\"
      - \"${PIHOLE_DNSMASQ_CONF}:/etc/dnsmasq.d/\"
      - \"${PIHOLE_RESOLV_CONF}:/etc/resolv.conf\"
      - \"${PIHOLE_LOG}:/var/log/pihole.log\"
      - \"${PIHOLE_FTL_LOG}:/var/log/pihole-FTL.log\"
    $(print_dns_ip)
    # Recommended but not required (DHCP needs NET_ADMIN)
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN
    restart: unless-stopped
" >"${PIHOLE_DOCKER_COMPOSE_FILENAME}"

cli_info "Created pi-hole services dockerfile successfully..."

##### Pull images

if ! docker-compose -f "${PIHOLE_DOCKER_COMPOSE_FILENAME}" pull; then
  cli_error "Failed to pull the required docker images - please ensure network connectivity"
  exit 1
else
  cli_info "Pulled the required docker images successfully"
fi

##### Create the services

# now execute the docker-compose using our newly created yaml
if ! docker-compose -p "${PIHOLE_DOCKER_PROJ_NAME}" -f ./"${PIHOLE_DOCKER_COMPOSE_FILENAME}" up -d --force-recreate; then
  cli_error "Could not create pi-hole docker service, exiting."
  exit 1
else
  cli_info "Installed pi-hole docker service successfully."
fi

##### Create and register ufw rule for pi-hole

setup_ufw() {
  # optionally, we can configure ufw to open pi-hole to our local network - but first, check if UFW is available.
  if [[ -z $(type -P "ufw") ]]; then
    cli_error "ufw was not found, skipping ufw parameterisation..."
    return 0
  fi

  # in case ufw was found and the flag is up continue
  if [[ "${UFW_CONF}" != true ]]; then
    cli_warning "ufw configuration not enabled, skipping..."
    return 0
  fi

  cli_info "Configuring ufw firewall is enabled - proceeding"
  # output the rule in the ufw application folder - note if rule already exists, skips creation.
  if [[ -f "/etc/ufw/applications.d/${UFW_PIHOLE_RULENAME}" ]]; then
    cli_warning "ufw pi-hole rule file already exists - skipping."
  else
    if ! echo -e \
      "[${UFW_PIHOLE_RULENAME}]
title=pihole
description=Pi Hole firewall rule
ports=53/tcp|53/udp|19080/tcp|19443/tcp
" | sudo tee -a "/etc/ufw/applications.d/${UFW_PIHOLE_RULENAME}" >/dev/null; then
      cli_error "Failed to output pi-hole ufw rule successfully - exiting."
      return 1
    else
      cli_info "ufw pi-hole rule file was created successfully!"
    fi
  fi

  # now configure the ufw rule
  if [[ "$(sudo ufw status)" == "Status: inactive" ]]; then
    cli_warning "ufw is inactive we are not adding the rule in it for now."
  elif ! sudo ufw status verbose | grep -q "${UFW_PIHOLE_RULENAME}"; then
    cli_info "ufw rule seems to be missing - trying to add!"
    if ! sudo ufw allow from "${UFW_SUBNET}" to any app "${UFW_PIHOLE_RULENAME}"; then
      cli_error "Failed to configure ufw rule - exiting!"
      return 1
    else
      cli_info "ufw pi-hole rule was applied successfully!"
    fi
  else
    cli_warning "ufw pi-hole rule seems to be registered already - skipping!"
  fi
}

# call the wrapper function to setup ufw
if setup_ufw; then
  cli_info "Configured ufw successfully"
else
  cli_error "Encountered an error while registering ufw rule - please do it manually"
fi

#### end

cli_info "Installation script finished successfully!"
